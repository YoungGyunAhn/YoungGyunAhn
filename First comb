// setup and loop함수빼고 control c v //

#include <SoftwareSerial.h>
#include <Servo.h>
#include <Wire.h>
#include <Servo.h>          //Servo motor library. This is standard library
#include <NewPing.h>        //Ultrasonic sensor function library. You must install this library


#define pinTrig 3
#define pinEcho 2
#define     uchar               unsigned char
#define     ushort              unsigned short
#define     SENSING_LEN         10
#define     SENSING_HISTERESIS  100
#define     CALC_AVG(target)    ((float)target/SENSING_LEN)
#define     MAX_ULONG            4294967295UL
//sensor pins
#define trig_pin A3 //analog input 1
#define echo_pin A2 //analog input 2

#define maximum_distance 200


//our L298N control pins
const int LeftMotorForward = 3;
const int LeftMotorBackward = 11;
const int RightMotorForward = 5;
const int RightMotorBackward = 6;

enum TYPE_APORT{PORT_TR=A0,PORT_BR=A1,PORT_TL=A2,PORT_BL=A3};
enum TYPE_BASE{LEFT=1,RIGHT=2};
enum TYPE_HEAD{TOP=1,BOTTOM=2};

const TYPE_APORT aportTable[] = {PORT_TR,PORT_BR,PORT_TL,PORT_BL};

typedef struct
{
  short  data[SENSING_LEN];
  long  total_value;
  TYPE_BASE base;
  TYPE_HEAD head;
} SENSOR;

boolean goesForward = false;
int distance = 100;

NewPing sonar(trig_pin, echo_pin, maximum_distance); //sensor function
Servo servo_motor; //our servo name


SENSOR cds_value[4];
uchar index_sensing;

Servo base,head;

unsigned long old_time;

SoftwareSerial swSerial(7, 6); //RX, TX





double measureDistanceCm(){
// The sensor is triggered by a HIGH pulse of 10 or more microseconds.
// Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
digitalWrite(pinTrig, LOW);
delayMicroseconds (5);
digitalWrite(pinTrig, HIGH);
delayMicroseconds (10); 
digitalWrite(pinTrig, LOW);

// Read the signal from the sensor: a HIGH pulse whose 
// duration is the time (in microseconds) from the sending

double duration = pulseIn(pinEcho, HIGH);

//Convert the time into a distance
//: Sound travels 343 m/s = 34308 cm/s == or 0.0343 cm/ms

double cm = (duration/2) * 0.0343;
return cm;
}


void setup() {
  swSerial.begin(9600);
  Serial.begin(9600);

  lcd.init();
  lcd.blink_on();
  lcd.backlight();
  lcd.setCursor(0, 1);
  lcd.print("Distance");

  //pins for the sensor
  pinMode(pinTrig, OUTPUT);
  pinMode(pinEcho, INPUT);

  pinMode(PORT_TR,INPUT);
  pinMode(PORT_BR,INPUT);
  pinMode(PORT_TL,INPUT);
  pinMode(PORT_BL,INPUT);

  cds_value[0].base = cds_value[1].base = TYPE_BASE::RIGHT;
  cds_value[2].base = cds_value[3].base = TYPE_BASE::LEFT;
  
  cds_value[0].head = cds_value[2].head = TYPE_HEAD::TOP;
  cds_value[1].head = cds_value[3].head = TYPE_HEAD::BOTTOM;
  
  Serial.begin(9600);

  base.attach(9);
  head.attach(10);

  base.write(90);
  head.write(90);
  delay(500);

  Wire.begin();
  Wire.setClock(400000UL); // 400KHz.
  
  old_time = millis();



  pinMode(RightMotorForward, OUTPUT);
  pinMode(LeftMotorForward, OUTPUT);
  pinMode(LeftMotorBackward, OUTPUT);
  pinMode(RightMotorBackward, OUTPUT);
  
  servo_motor.attach(11); //our servo pin

  servo_motor.write(90);
  delay(2000);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
}


void loop(){
    sunlight();
    motorMove();
    detectObstacle();
}

void detectObstacle(){
  double distance = measureDistanceCm();

  String msg_line = String(distance, 1);
  Serial.println(msg_line);
  lcd.setCursor(1, 0);
  lcd.print(msg_line);

  //For debugging
  Serial.write(msg_line.c_str());
  Serial.write('/n');

  //Transmit to another Arduino
  swSerial.write(msg_line.c_str());
  Serial.write('/n');
  
  delay(1000);
}

void motorMove(){

  int distanceRight = 0;
  int distanceLeft = 0;
  delay(50);

  if (distance <= 20){
    moveStop();
    delay(300);
    moveBackward();
    delay(400);
    moveStop();
    delay(300);
    distanceRight = lookRight();
    delay(300);
    distanceLeft = lookLeft();
    delay(300);

    if (distance >= distanceLeft){
      turnRight();
      moveStop();
    }
    else{
      turnLeft();
      moveStop();
    }
  }
  else{
    moveForward(); 
  }
    distance = readPing();
}


void sunlight() { 
  unsigned long int totalSensorValue = 0;
  
  //센싱.
  for(char i=0;i<4;i++)
  {
    cds_value[i].total_value = cds_value[i].total_value - cds_value[i].data[index_sensing];
    cds_value[i].data[index_sensing] = analogRead(aportTable[i]);
    cds_value[i].total_value = cds_value[i].total_value + cds_value[i].data[index_sensing];
    totalSensorValue += cds_value[i].total_value;
  }
  index_sensing = (index_sensing + 1) % SENSING_LEN;


  unsigned long cur_time = millis();

  if((MAX_ULONG-old_time+cur_time) % MAX_ULONG >= 10)
  {
    //1위 2위값 추출
    char index_rank[4];
  
    for(char i=0;i<=2;i+=2)
    {
      if(cds_value[i].total_value > cds_value[i+1].total_value)
      {
        index_rank[i] = i;
        index_rank[i+1] = i+1;
      }
      else
      {
        index_rank[i] = i+1;
        index_rank[i+1] = i;
      }
    }
    
    if(cds_value[index_rank[0]].total_value > cds_value[index_rank[2]].total_value)
    {
      if(cds_value[index_rank[1]].total_value < cds_value[index_rank[2]].total_value)
      {
        index_rank[1] = index_rank[2];
      }
    }
    else
    {
      if(cds_value[index_rank[0]].total_value < cds_value[index_rank[3]].total_value)
      {
        index_rank[1] = index_rank[3];
      }
      else
      {
        index_rank[1] = index_rank[0];
      }
      index_rank[0] = index_rank[2];
    }


    Serial.print("1 : "); Serial.print(index_rank[0],DEC); Serial.print("  2 : "); Serial.println(index_rank[1],DEC);
  
    
    //동작값 설정.
    char dir_base=0;
    char dir_head=0;
    
    if(cds_value[index_rank[0]].base == cds_value[index_rank[1]].base)
    {
      if(cds_value[index_rank[0]].base == TYPE_BASE::RIGHT)
      {
        dir_base = 1;
      }
      else
      {
        dir_base = -1;
      }
    }
    else if(cds_value[index_rank[0]].head == cds_value[index_rank[1]].head)
    {
      if(cds_value[index_rank[0]].head == TYPE_HEAD::TOP)
      {
        dir_head = -1;
      }
      else
      {
        dir_head = 1;
      }
    }
    else
    {
      unsigned long total_A = (cds_value[0].total_value/10.0f) + (cds_value[3].total_value/10.0f);
      unsigned long total_B = (cds_value[1].total_value/10.0f) + (cds_value[2].total_value/10.0f);
  
      if(abs(total_A - total_B) > 100)  // 불안정한 상태
      {
        if(cds_value[index_rank[0]].base == TYPE_BASE::RIGHT) dir_base = 1;
        else dir_base =-1;
  
        if(cds_value[index_rank[0]].head == TYPE_HEAD::TOP) dir_head = -1;
        else dir_base = 1;
      }
    }
  
    //동작.
    int angle_base = base.read() + dir_base;
    int angle_head = head.read() + dir_head;
  
    if(angle_base < 0) angle_base = 0;
    else if(180 < angle_base) angle_base = 180;
  
    if(angle_head < 0) angle_head = 0;
    else if(180 < angle_head) angle_head = 180;
  
    base.write(angle_base);
    head.write(angle_head);

    old_time = millis();
  }
}


int lookRight(){  
  servo_motor.write(10);
  delay(500);
  int distance = readPing();
  delay(100);
  servo_motor.write(90);
  return distance;
}

int lookLeft(){
  servo_motor.write(170);
  delay(500);
  int distance = readPing();
  delay(100);
  servo_motor.write(90);
  return distance;
  delay(100);
}

int readPing(){
  delay(70);
  int cm = sonar.ping_cm();
  if (cm==0){
    cm=250;
  }
  return cm;
}

void moveStop(){
  
  digitalWrite(RightMotorForward, LOW);
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, LOW);
}

void moveForward(){

  if(!goesForward){

    goesForward=true;
    
    digitalWrite(LeftMotorForward, HIGH);
    digitalWrite(RightMotorForward, HIGH);
  
    digitalWrite(LeftMotorBackward, LOW);
    digitalWrite(RightMotorBackward, LOW); 
  }
}

void moveBackward(){

  goesForward=false;

  digitalWrite(LeftMotorBackward, HIGH);
  digitalWrite(RightMotorBackward, HIGH);
  
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorForward, LOW);
  
}

void turnRight(){

  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorBackward, HIGH);
  
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorForward, LOW);
  
  delay(500);
  
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorForward, HIGH);
  
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, LOW);
 
  
  
}

void turnLeft(){

  digitalWrite(LeftMotorBackward, HIGH);
  digitalWrite(RightMotorForward, HIGH);
  
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);

  delay(500);
  
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorForward, HIGH);
  
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, LOW);
}
